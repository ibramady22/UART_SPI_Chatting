
chatting_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000958  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000958  000009ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000073  00800092  00800092  00000a1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022a7  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc2  00000000  00000000  00002fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000138e  00000000  00000000  00003d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a0  00000000  00000000  000050f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a48  00000000  00000000  00005794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cc7  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00007ea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_1>
   8:	0c 94 b2 03 	jmp	0x764	; 0x764 <__vector_2>
   c:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 16 04 	jmp	0x82c	; 0x82c <__vector_12>
  34:	0c 94 81 04 	jmp	0x902	; 0x902 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 30       	cpi	r26, 0x05	; 5
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 80 01 	call	0x300	; 0x300 <main>
  8a:	0c 94 aa 04 	jmp	0x954	; 0x954 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteData>:
	}
	for(j=i-1;j>=0;j--)
	{
		LCD_WriteChar(str[j]);
	}
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	82 e1       	ldi	r24, 0x12	; 18
  9a:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	87 e1       	ldi	r24, 0x17	; 23
  a8:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	86 e1       	ldi	r24, 0x16	; 22
  b4:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	85 e1       	ldi	r24, 0x15	; 21
  c0:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	84 e1       	ldi	r24, 0x14	; 20
  cc:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <WriteData+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteData+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <WriteData+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <WriteData+0x64>
  f6:	00 00       	nop
  f8:	c3 fb       	bst	r28, 3
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	87 e1       	ldi	r24, 0x17	; 23
 100:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 104:	c2 fb       	bst	r28, 2
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	86 e1       	ldi	r24, 0x16	; 22
 10c:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 110:	c1 fb       	bst	r28, 1
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	85 e1       	ldi	r24, 0x15	; 21
 118:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 11c:	6c 2f       	mov	r22, r28
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	84 e1       	ldi	r24, 0x14	; 20
 122:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <WriteData+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <WriteData+0xa6>
 138:	00 00       	nop
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 142:	8f ec       	ldi	r24, 0xCF	; 207
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <WriteData+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <WriteData+0xba>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <WriteInstruction>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	82 e1       	ldi	r24, 0x12	; 18
 15a:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 15e:	6c 2f       	mov	r22, r28
 160:	66 1f       	adc	r22, r22
 162:	66 27       	eor	r22, r22
 164:	66 1f       	adc	r22, r22
 166:	87 e1       	ldi	r24, 0x17	; 23
 168:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 16c:	c6 fb       	bst	r28, 6
 16e:	66 27       	eor	r22, r22
 170:	60 f9       	bld	r22, 0
 172:	86 e1       	ldi	r24, 0x16	; 22
 174:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 178:	c5 fb       	bst	r28, 5
 17a:	66 27       	eor	r22, r22
 17c:	60 f9       	bld	r22, 0
 17e:	85 e1       	ldi	r24, 0x15	; 21
 180:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 184:	c4 fb       	bst	r28, 4
 186:	66 27       	eor	r22, r22
 188:	60 f9       	bld	r22, 0
 18a:	84 e1       	ldi	r24, 0x14	; 20
 18c:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	80 e1       	ldi	r24, 0x10	; 16
 194:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 198:	8f ec       	ldi	r24, 0xCF	; 207
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <WriteInstruction+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <WriteInstruction+0x50>
 1a2:	00 00       	nop
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	80 e1       	ldi	r24, 0x10	; 16
 1a8:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 1ac:	8f ec       	ldi	r24, 0xCF	; 207
 1ae:	97 e0       	ldi	r25, 0x07	; 7
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <WriteInstruction+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <WriteInstruction+0x64>
 1b6:	00 00       	nop
 1b8:	c3 fb       	bst	r28, 3
 1ba:	66 27       	eor	r22, r22
 1bc:	60 f9       	bld	r22, 0
 1be:	87 e1       	ldi	r24, 0x17	; 23
 1c0:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 1c4:	c2 fb       	bst	r28, 2
 1c6:	66 27       	eor	r22, r22
 1c8:	60 f9       	bld	r22, 0
 1ca:	86 e1       	ldi	r24, 0x16	; 22
 1cc:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 1d0:	c1 fb       	bst	r28, 1
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	85 e1       	ldi	r24, 0x15	; 21
 1d8:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 1dc:	6c 2f       	mov	r22, r28
 1de:	61 70       	andi	r22, 0x01	; 1
 1e0:	84 e1       	ldi	r24, 0x14	; 20
 1e2:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	80 e1       	ldi	r24, 0x10	; 16
 1ea:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 1ee:	8f ec       	ldi	r24, 0xCF	; 207
 1f0:	97 e0       	ldi	r25, 0x07	; 7
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <WriteInstruction+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <WriteInstruction+0xa6>
 1f8:	00 00       	nop
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 202:	8f ec       	ldi	r24, 0xCF	; 207
 204:	97 e0       	ldi	r25, 0x07	; 7
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <WriteInstruction+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <WriteInstruction+0xba>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_Init>:
 212:	2f e7       	ldi	r18, 0x7F	; 127
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_Init+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Init+0x10>
 222:	00 00       	nop
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 a9 00 	call	0x152	; 0x152 <WriteInstruction>
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 a9 00 	call	0x152	; 0x152 <WriteInstruction>
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 a9 00 	call	0x152	; 0x152 <WriteInstruction>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 a9 00 	call	0x152	; 0x152 <WriteInstruction>
 23c:	8f ec       	ldi	r24, 0xCF	; 207
 23e:	97 e0       	ldi	r25, 0x07	; 7
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Init+0x2e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x34>
 246:	00 00       	nop
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 a9 00 	call	0x152	; 0x152 <WriteInstruction>
 24e:	08 95       	ret

00000250 <LCD_SetCursor>:
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	d8 2f       	mov	r29, r24
 256:	cf ef       	ldi	r28, 0xFF	; 255
 258:	c6 0f       	add	r28, r22
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	39 f4       	brne	.+14     	; 0x26c <LCD_SetCursor+0x1c>
 25e:	c0 31       	cpi	r28, 0x10	; 16
 260:	28 f4       	brcc	.+10     	; 0x26c <LCD_SetCursor+0x1c>
 262:	8c 2f       	mov	r24, r28
 264:	80 68       	ori	r24, 0x80	; 128
 266:	0e 94 a9 00 	call	0x152	; 0x152 <WriteInstruction>
 26a:	09 c0       	rjmp	.+18     	; 0x27e <LCD_SetCursor+0x2e>
 26c:	d2 30       	cpi	r29, 0x02	; 2
 26e:	69 f4       	brne	.+26     	; 0x28a <LCD_SetCursor+0x3a>
 270:	c0 31       	cpi	r28, 0x10	; 16
 272:	68 f4       	brcc	.+26     	; 0x28e <LCD_SetCursor+0x3e>
 274:	8c 2f       	mov	r24, r28
 276:	80 68       	ori	r24, 0x80	; 128
 278:	80 5c       	subi	r24, 0xC0	; 192
 27a:	0e 94 a9 00 	call	0x152	; 0x152 <WriteInstruction>
 27e:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <lcd_cursorCell>
 282:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__DATA_REGION_ORIGIN__>
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	03 c0       	rjmp	.+6      	; 0x290 <LCD_SetCursor+0x40>
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	01 c0       	rjmp	.+2      	; 0x290 <LCD_SetCursor+0x40>
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <LCD_ManageCursor>:
 296:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lcd_cursorCell>
 29a:	81 31       	cpi	r24, 0x11	; 17
 29c:	78 f0       	brcs	.+30     	; 0x2bc <LCD_ManageCursor+0x26>
 29e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	29 f4       	brne	.+10     	; 0x2b0 <LCD_ManageCursor+0x1a>
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	0e 94 28 01 	call	0x250	; 0x250 <LCD_SetCursor>
 2ae:	08 95       	ret
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	21 f4       	brne	.+8      	; 0x2bc <LCD_ManageCursor+0x26>
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_SetCursor>
 2bc:	08 95       	ret

000002be <LCD_WriteChar>:
 2be:	cf 93       	push	r28
 2c0:	c8 2f       	mov	r28, r24
 2c2:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_ManageCursor>
 2c6:	8c 2f       	mov	r24, r28
 2c8:	0e 94 49 00 	call	0x92	; 0x92 <WriteData>
 2cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lcd_cursorCell>
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
 2d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lcd_cursorCell>
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <LCD_WriteString>:
		}
		num=num-(num/i)*i;
	}
}
void LCD_WriteString(u8* str)
{
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	8c 01       	movw	r16, r24
	u8 i;
	for(i=0;str[i];i++)
 2e2:	c0 e0       	ldi	r28, 0x00	; 0
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i]);
 2e6:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_WriteChar>
	}
}
void LCD_WriteString(u8* str)
{
	u8 i;
	for(i=0;str[i];i++)
 2ea:	cf 5f       	subi	r28, 0xFF	; 255
 2ec:	f8 01       	movw	r30, r16
 2ee:	ec 0f       	add	r30, r28
 2f0:	f1 1d       	adc	r31, r1
 2f2:	80 81       	ld	r24, Z
 2f4:	81 11       	cpse	r24, r1
 2f6:	f7 cf       	rjmp	.-18     	; 0x2e6 <LCD_WriteString+0xc>
	{
		LCD_WriteChar(str[i]);
	}
}
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <main>:

/*****************************************   MAIN FUNC  ***********************************************************/
int main(void)
{
	/****** INITIATION ****/
	DIO_Init();
 300:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DIO_Init>
	LCD_Init();
 304:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	UART_Init();
 308:	0e 94 3f 04 	call	0x87e	; 0x87e <UART_Init>
	UART_RX_InterruptEnable();
 30c:	0e 94 4f 04 	call	0x89e	; 0x89e <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(UART_RX_CALL);
 310:	8f ed       	ldi	r24, 0xDF	; 223
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 53 04 	call	0x8a6	; 0x8a6 <UART_RX_SetCallBack>
// 	UART_TX_SetCallBack(UART_TX_CALL);
// 	UART_TX_InterruptEnable();
	SPI_Init(SLAVE);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 04 04 	call	0x808	; 0x808 <SPI_Init>
// 	SPI_InterruptEnable();
// 	SPI_SetCallback(SPI_RECEIVE_CALL);
	LCD_WriteString("     HELLO PC2");
 31e:	83 e6       	ldi	r24, 0x63	; 99
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_WriteString>
	sei();
 326:	78 94       	sei
 328:	1c c0       	rjmp	.+56     	; 0x362 <main+0x62>
	
	while(1)
	{		
		while(SLAVE_SEND_FLAG==start)
		{
			SPI_SendReceive(UART_TO_SPI[UART_TO_SPI_ITER]);
 32a:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <UART_TO_SPI_ITER>
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	e9 53       	subi	r30, 0x39	; 57
 332:	ff 4f       	sbci	r31, 0xFF	; 255
 334:	80 81       	ld	r24, Z
 336:	0e 94 11 04 	call	0x822	; 0x822 <SPI_SendReceive>
			if(UART_TO_SPI[UART_TO_SPI_ITER]==ENTER_ASCII)
 33a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <UART_TO_SPI_ITER>
 33e:	e8 2f       	mov	r30, r24
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	e9 53       	subi	r30, 0x39	; 57
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	90 81       	ld	r25, Z
 348:	9d 30       	cpi	r25, 0x0D	; 13
 34a:	41 f4       	brne	.+16     	; 0x35c <main+0x5c>
			{
				UART_TO_SPI_ITER=0;
 34c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <UART_TO_SPI_ITER>
				SLAVE_RECEIVE_FLAG=start;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <SLAVE_RECEIVE_FLAG>
				SLAVE_SEND_FLAG=stop;
 356:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
				break;
 35a:	1c c0       	rjmp	.+56     	; 0x394 <main+0x94>
			}
			else
			{
				UART_TO_SPI_ITER++;
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <UART_TO_SPI_ITER>
	LCD_WriteString("     HELLO PC2");
	sei();
	
	while(1)
	{		
		while(SLAVE_SEND_FLAG==start)
 362:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	a9 f4       	brne	.+42     	; 0x394 <main+0x94>
 36a:	df cf       	rjmp	.-66     	; 0x32a <main+0x2a>
				UART_TO_SPI_ITER++;
			}
		}
		while(SLAVE_RECEIVE_FLAG==start)
		{
			UART_Send_noBlock(SPI_SendReceive(SPI_TO_UART[SPI_TO_UART_ITER]));
 36c:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <SPI_TO_UART_ITER>
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	eb 56       	subi	r30, 0x6B	; 107
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	80 81       	ld	r24, Z
 378:	0e 94 11 04 	call	0x822	; 0x822 <SPI_SendReceive>
 37c:	0e 94 4b 04 	call	0x896	; 0x896 <UART_Send_noBlock>
			if(SLAVE_SEND_FLAG==start)
 380:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	31 f4       	brne	.+12     	; 0x394 <main+0x94>
			{
				SPI_TO_UART_ITER++;
 388:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <SPI_TO_UART_ITER>
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <SPI_TO_UART_ITER>
				break;
 392:	e7 cf       	rjmp	.-50     	; 0x362 <main+0x62>
			else
			{
				UART_TO_SPI_ITER++;
			}
		}
		while(SLAVE_RECEIVE_FLAG==start)
 394:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SLAVE_RECEIVE_FLAG>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	41 f3       	breq	.-48     	; 0x36c <main+0x6c>
 39c:	e2 cf       	rjmp	.-60     	; 0x362 <main+0x62>

0000039e <send_signal>:
		UART_TO_SPI_ITER++;
	}
}
void send_signal(void)
{
	SLAVE_SEND_FLAG=start;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
	DIO_WritePin(PINA0,HIGH);
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	8d e0       	ldi	r24, 0x0D	; 13
 3ae:	8a 95       	dec	r24
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <send_signal+0x10>
 3b2:	00 00       	nop
	_delay_us(5);
	DIO_WritePin(PINA0,LOW);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 04 03 	call	0x608	; 0x608 <DIO_WritePin>
 3bc:	08 95       	ret

000003be <UART_RX_CALL>:

void UART_RX_CALL(void)
{
	
	static u8 RXvar;
	RXvar=UART_Receive_noBlock();
 3be:	0e 94 4d 04 	call	0x89a	; 0x89a <UART_Receive_noBlock>
	UART_TO_SPI[UART_TO_SPI_ITER]=RXvar;
 3c2:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <UART_TO_SPI_ITER>
 3c6:	e9 2f       	mov	r30, r25
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	e9 53       	subi	r30, 0x39	; 57
 3cc:	ff 4f       	sbci	r31, 0xFF	; 255
 3ce:	80 83       	st	Z, r24
	if(UART_TO_SPI[UART_TO_SPI_ITER]==ENTER_ASCII)
 3d0:	8d 30       	cpi	r24, 0x0D	; 13
 3d2:	49 f4       	brne	.+18     	; 0x3e6 <UART_RX_CALL+0x28>
	{
		SLAVE_SEND_FLAG=start;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
		UART_TO_SPI_ITER=-1;	
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <UART_TO_SPI_ITER>
		send_signal();	
 3e0:	0e 94 cf 01 	call	0x39e	; 0x39e <send_signal>
 3e4:	08 95       	ret
	}
	else
	{
		UART_TO_SPI_ITER++;
 3e6:	9f 5f       	subi	r25, 0xFF	; 255
 3e8:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <UART_TO_SPI_ITER>
 3ec:	08 95       	ret

000003ee <DIO_InitPin>:
	}
}

 static void DIO_InitPin(DIO_Pin_type pin, DIO_PinStatus_type status )
{
	DIO_Port_type port=pin/8;
 3ee:	98 2f       	mov	r25, r24
 3f0:	96 95       	lsr	r25
 3f2:	96 95       	lsr	r25
 3f4:	96 95       	lsr	r25
	u8 Pin_num=pin%8;
 3f6:	87 70       	andi	r24, 0x07	; 7
	switch (status)
 3f8:	61 30       	cpi	r22, 0x01	; 1
 3fa:	09 f4       	brne	.+2      	; 0x3fe <DIO_InitPin+0x10>
 3fc:	55 c0       	rjmp	.+170    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 3fe:	20 f0       	brcs	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 400:	62 30       	cpi	r22, 0x02	; 2
 402:	09 f4       	brne	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	a1 c0       	rjmp	.+322    	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 406:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
 408:	91 30       	cpi	r25, 0x01	; 1
 40a:	c1 f0       	breq	.+48     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 40c:	28 f0       	brcs	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40e:	92 30       	cpi	r25, 0x02	; 2
 410:	39 f1       	breq	.+78     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 412:	93 30       	cpi	r25, 0x03	; 3
 414:	b9 f1       	breq	.+110    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 416:	08 95       	ret
		{
			case PA:
			SET_BIT (DDRA,Pin_num);
 418:	4a b3       	in	r20, 0x1a	; 26
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	cb 01       	movw	r24, r22
 42c:	94 2f       	mov	r25, r20
 42e:	98 2b       	or	r25, r24
 430:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,Pin_num);
 432:	9b b3       	in	r25, 0x1b	; 27
 434:	80 95       	com	r24
 436:	89 23       	and	r24, r25
 438:	8b bb       	out	0x1b, r24	; 27
			break;
 43a:	08 95       	ret
			case PB:
			SET_BIT (DDRB,Pin_num);
 43c:	47 b3       	in	r20, 0x17	; 23
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	b9 01       	movw	r22, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	8a 95       	dec	r24
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	cb 01       	movw	r24, r22
 450:	94 2f       	mov	r25, r20
 452:	98 2b       	or	r25, r24
 454:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,Pin_num);
 456:	98 b3       	in	r25, 0x18	; 24
 458:	80 95       	com	r24
 45a:	89 23       	and	r24, r25
 45c:	88 bb       	out	0x18, r24	; 24
			break;
 45e:	08 95       	ret
			case PC:
			SET_BIT (DDRC,Pin_num);
 460:	44 b3       	in	r20, 0x14	; 20
 462:	21 e0       	ldi	r18, 0x01	; 1
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	b9 01       	movw	r22, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	8a 95       	dec	r24
 470:	e2 f7       	brpl	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	cb 01       	movw	r24, r22
 474:	94 2f       	mov	r25, r20
 476:	98 2b       	or	r25, r24
 478:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,Pin_num);
 47a:	95 b3       	in	r25, 0x15	; 21
 47c:	80 95       	com	r24
 47e:	89 23       	and	r24, r25
 480:	85 bb       	out	0x15, r24	; 21
			break;
 482:	08 95       	ret
			case PD:
			SET_BIT (DDRD,Pin_num);
 484:	41 b3       	in	r20, 0x11	; 17
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	b9 01       	movw	r22, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	8a 95       	dec	r24
 494:	e2 f7       	brpl	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	cb 01       	movw	r24, r22
 498:	94 2f       	mov	r25, r20
 49a:	98 2b       	or	r25, r24
 49c:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,Pin_num);
 49e:	92 b3       	in	r25, 0x12	; 18
 4a0:	80 95       	com	r24
 4a2:	89 23       	and	r24, r25
 4a4:	82 bb       	out	0x12, r24	; 18
			break;
 4a6:	08 95       	ret
		}
		break;
		case INFREE:
		switch(port)
 4a8:	91 30       	cpi	r25, 0x01	; 1
 4aa:	c1 f0       	breq	.+48     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4ac:	28 f0       	brcs	.+10     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4ae:	92 30       	cpi	r25, 0x02	; 2
 4b0:	39 f1       	breq	.+78     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4b2:	93 30       	cpi	r25, 0x03	; 3
 4b4:	b9 f1       	breq	.+110    	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 4b6:	08 95       	ret
		{
			case PA:
			CLR_BIT (DDRA,Pin_num);
 4b8:	4a b3       	in	r20, 0x1a	; 26
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ca:	cb 01       	movw	r24, r22
 4cc:	80 95       	com	r24
 4ce:	94 2f       	mov	r25, r20
 4d0:	98 23       	and	r25, r24
 4d2:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,Pin_num);
 4d4:	9b b3       	in	r25, 0x1b	; 27
 4d6:	89 23       	and	r24, r25
 4d8:	8b bb       	out	0x1b, r24	; 27
			break;
 4da:	08 95       	ret
			case PB:
			CLR_BIT (DDRB,Pin_num);
 4dc:	47 b3       	in	r20, 0x17	; 23
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	b9 01       	movw	r22, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	8a 95       	dec	r24
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4ee:	cb 01       	movw	r24, r22
 4f0:	80 95       	com	r24
 4f2:	94 2f       	mov	r25, r20
 4f4:	98 23       	and	r25, r24
 4f6:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,Pin_num);
 4f8:	98 b3       	in	r25, 0x18	; 24
 4fa:	89 23       	and	r24, r25
 4fc:	88 bb       	out	0x18, r24	; 24
			break;
 4fe:	08 95       	ret
			case PC:
			CLR_BIT (DDRC,Pin_num);
 500:	44 b3       	in	r20, 0x14	; 20
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	b9 01       	movw	r22, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 512:	cb 01       	movw	r24, r22
 514:	80 95       	com	r24
 516:	94 2f       	mov	r25, r20
 518:	98 23       	and	r25, r24
 51a:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,Pin_num);
 51c:	95 b3       	in	r25, 0x15	; 21
 51e:	89 23       	and	r24, r25
 520:	85 bb       	out	0x15, r24	; 21
			break;
 522:	08 95       	ret
			case PD:
			CLR_BIT (DDRD,Pin_num);
 524:	41 b3       	in	r20, 0x11	; 17
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	b9 01       	movw	r22, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	8a 95       	dec	r24
 534:	e2 f7       	brpl	.-8      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 536:	cb 01       	movw	r24, r22
 538:	80 95       	com	r24
 53a:	94 2f       	mov	r25, r20
 53c:	98 23       	and	r25, r24
 53e:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,Pin_num);
 540:	92 b3       	in	r25, 0x12	; 18
 542:	89 23       	and	r24, r25
 544:	82 bb       	out	0x12, r24	; 18
			break;
 546:	08 95       	ret
		}
		break;
		case INPULL:
		switch(port)
 548:	91 30       	cpi	r25, 0x01	; 1
 54a:	c1 f0       	breq	.+48     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 54c:	28 f0       	brcs	.+10     	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 54e:	92 30       	cpi	r25, 0x02	; 2
 550:	39 f1       	breq	.+78     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 552:	93 30       	cpi	r25, 0x03	; 3
 554:	b9 f1       	breq	.+110    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 556:	08 95       	ret
		{
			case PA:
			CLR_BIT (DDRA,Pin_num);
 558:	4a b3       	in	r20, 0x1a	; 26
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	b9 01       	movw	r22, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
 562:	66 0f       	add	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	8a 95       	dec	r24
 568:	e2 f7       	brpl	.-8      	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 56a:	cb 01       	movw	r24, r22
 56c:	96 2f       	mov	r25, r22
 56e:	90 95       	com	r25
 570:	94 23       	and	r25, r20
 572:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,Pin_num);
 574:	9b b3       	in	r25, 0x1b	; 27
 576:	89 2b       	or	r24, r25
 578:	8b bb       	out	0x1b, r24	; 27
			break;
 57a:	08 95       	ret
			case PB:
			CLR_BIT (DDRB,Pin_num);
 57c:	47 b3       	in	r20, 0x17	; 23
 57e:	21 e0       	ldi	r18, 0x01	; 1
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	b9 01       	movw	r22, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	8a 95       	dec	r24
 58c:	e2 f7       	brpl	.-8      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 58e:	cb 01       	movw	r24, r22
 590:	96 2f       	mov	r25, r22
 592:	90 95       	com	r25
 594:	94 23       	and	r25, r20
 596:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,Pin_num);
 598:	98 b3       	in	r25, 0x18	; 24
 59a:	89 2b       	or	r24, r25
 59c:	88 bb       	out	0x18, r24	; 24
			break;
 59e:	08 95       	ret
			case PC:
			CLR_BIT (DDRC,Pin_num);
 5a0:	44 b3       	in	r20, 0x14	; 20
 5a2:	21 e0       	ldi	r18, 0x01	; 1
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	b9 01       	movw	r22, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	8a 95       	dec	r24
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 5b2:	cb 01       	movw	r24, r22
 5b4:	96 2f       	mov	r25, r22
 5b6:	90 95       	com	r25
 5b8:	94 23       	and	r25, r20
 5ba:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,Pin_num);
 5bc:	95 b3       	in	r25, 0x15	; 21
 5be:	89 2b       	or	r24, r25
 5c0:	85 bb       	out	0x15, r24	; 21
			break;
 5c2:	08 95       	ret
			case PD:
			CLR_BIT (DDRD,Pin_num);
 5c4:	41 b3       	in	r20, 0x11	; 17
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
 5d6:	cb 01       	movw	r24, r22
 5d8:	96 2f       	mov	r25, r22
 5da:	90 95       	com	r25
 5dc:	94 23       	and	r25, r20
 5de:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,Pin_num);
 5e0:	92 b3       	in	r25, 0x12	; 18
 5e2:	89 2b       	or	r24, r25
 5e4:	82 bb       	out	0x12, r24	; 18
 5e6:	08 95       	ret

000005e8 <DIO_Init>:




void DIO_Init(void)
{
 5e8:	cf 93       	push	r28
	DIO_Pin_type i;
	for(i=PINA0;i<TOTAL_PINS;i++)
 5ea:	c0 e0       	ldi	r28, 0x00	; 0
 5ec:	09 c0       	rjmp	.+18     	; 0x600 <DIO_Init+0x18>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
 5ee:	ec 2f       	mov	r30, r28
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	ee 58       	subi	r30, 0x8E	; 142
 5f4:	ff 4f       	sbci	r31, 0xFF	; 255
 5f6:	60 81       	ld	r22, Z
 5f8:	8c 2f       	mov	r24, r28
 5fa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_InitPin>


void DIO_Init(void)
{
	DIO_Pin_type i;
	for(i=PINA0;i<TOTAL_PINS;i++)
 5fe:	cf 5f       	subi	r28, 0xFF	; 255
 600:	c0 32       	cpi	r28, 0x20	; 32
 602:	a8 f3       	brcs	.-22     	; 0x5ee <DIO_Init+0x6>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
	}
}
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <DIO_WritePin>:
}


void DIO_WritePin(DIO_Pin_type pin,DIO_PinVoltage_type volt  ) //werite ..... always output
{
	DIO_Port_type port=pin/8;
 608:	98 2f       	mov	r25, r24
 60a:	96 95       	lsr	r25
 60c:	96 95       	lsr	r25
 60e:	96 95       	lsr	r25
	u8 Pin_num=pin%8;
 610:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH)
 612:	61 30       	cpi	r22, 0x01	; 1
 614:	e1 f5       	brne	.+120    	; 0x68e <DIO_WritePin+0x86>
	{
		switch(port)
 616:	91 30       	cpi	r25, 0x01	; 1
 618:	99 f0       	breq	.+38     	; 0x640 <DIO_WritePin+0x38>
 61a:	28 f0       	brcs	.+10     	; 0x626 <DIO_WritePin+0x1e>
 61c:	92 30       	cpi	r25, 0x02	; 2
 61e:	e9 f0       	breq	.+58     	; 0x65a <DIO_WritePin+0x52>
 620:	93 30       	cpi	r25, 0x03	; 3
 622:	41 f1       	breq	.+80     	; 0x674 <DIO_WritePin+0x6c>
 624:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,Pin_num);
 626:	4b b3       	in	r20, 0x1b	; 27
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	b9 01       	movw	r22, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_WritePin+0x2c>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	8a 95       	dec	r24
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_WritePin+0x28>
 638:	cb 01       	movw	r24, r22
 63a:	84 2b       	or	r24, r20
 63c:	8b bb       	out	0x1b, r24	; 27
			break;
 63e:	08 95       	ret
			case PB:
			SET_BIT(PORTB,Pin_num);
 640:	48 b3       	in	r20, 0x18	; 24
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	b9 01       	movw	r22, r18
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_WritePin+0x46>
 64a:	66 0f       	add	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	8a 95       	dec	r24
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_WritePin+0x42>
 652:	cb 01       	movw	r24, r22
 654:	84 2b       	or	r24, r20
 656:	88 bb       	out	0x18, r24	; 24
			break;
 658:	08 95       	ret
			case PC:
			SET_BIT(PORTC,Pin_num);
 65a:	45 b3       	in	r20, 0x15	; 21
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	b9 01       	movw	r22, r18
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_WritePin+0x60>
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	8a 95       	dec	r24
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_WritePin+0x5c>
 66c:	cb 01       	movw	r24, r22
 66e:	84 2b       	or	r24, r20
 670:	85 bb       	out	0x15, r24	; 21
			break;
 672:	08 95       	ret
			case PD:
			SET_BIT(PORTD,Pin_num);
 674:	42 b3       	in	r20, 0x12	; 18
 676:	21 e0       	ldi	r18, 0x01	; 1
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	b9 01       	movw	r22, r18
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_WritePin+0x7a>
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	8a 95       	dec	r24
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_WritePin+0x76>
 686:	cb 01       	movw	r24, r22
 688:	84 2b       	or	r24, r20
 68a:	82 bb       	out	0x12, r24	; 18
			break;
 68c:	08 95       	ret
		}
	}
	else if (volt==LOW)
 68e:	61 11       	cpse	r22, r1
 690:	3f c0       	rjmp	.+126    	; 0x710 <DIO_WritePin+0x108>
	{
		switch(port)
 692:	91 30       	cpi	r25, 0x01	; 1
 694:	a1 f0       	breq	.+40     	; 0x6be <DIO_WritePin+0xb6>
 696:	28 f0       	brcs	.+10     	; 0x6a2 <DIO_WritePin+0x9a>
 698:	92 30       	cpi	r25, 0x02	; 2
 69a:	f9 f0       	breq	.+62     	; 0x6da <DIO_WritePin+0xd2>
 69c:	93 30       	cpi	r25, 0x03	; 3
 69e:	59 f1       	breq	.+86     	; 0x6f6 <DIO_WritePin+0xee>
 6a0:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA,Pin_num);
 6a2:	4b b3       	in	r20, 0x1b	; 27
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	b9 01       	movw	r22, r18
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_WritePin+0xa8>
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	8a 95       	dec	r24
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_WritePin+0xa4>
 6b4:	cb 01       	movw	r24, r22
 6b6:	80 95       	com	r24
 6b8:	84 23       	and	r24, r20
 6ba:	8b bb       	out	0x1b, r24	; 27
			break;
 6bc:	08 95       	ret
			case PB:
			CLR_BIT(PORTB,Pin_num);
 6be:	48 b3       	in	r20, 0x18	; 24
 6c0:	21 e0       	ldi	r18, 0x01	; 1
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	b9 01       	movw	r22, r18
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_WritePin+0xc4>
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	8a 95       	dec	r24
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_WritePin+0xc0>
 6d0:	cb 01       	movw	r24, r22
 6d2:	80 95       	com	r24
 6d4:	84 23       	and	r24, r20
 6d6:	88 bb       	out	0x18, r24	; 24
			break;
 6d8:	08 95       	ret
			case PC:
			CLR_BIT(PORTC,Pin_num);
 6da:	45 b3       	in	r20, 0x15	; 21
 6dc:	21 e0       	ldi	r18, 0x01	; 1
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	b9 01       	movw	r22, r18
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_WritePin+0xe0>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	8a 95       	dec	r24
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_WritePin+0xdc>
 6ec:	cb 01       	movw	r24, r22
 6ee:	80 95       	com	r24
 6f0:	84 23       	and	r24, r20
 6f2:	85 bb       	out	0x15, r24	; 21
			break;
 6f4:	08 95       	ret
			case PD:
			CLR_BIT(PORTD,Pin_num);
 6f6:	42 b3       	in	r20, 0x12	; 18
 6f8:	21 e0       	ldi	r18, 0x01	; 1
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	b9 01       	movw	r22, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_WritePin+0xfc>
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	8a 95       	dec	r24
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_WritePin+0xf8>
 708:	cb 01       	movw	r24, r22
 70a:	80 95       	com	r24
 70c:	84 23       	and	r24, r20
 70e:	82 bb       	out	0x12, r24	; 18
 710:	08 95       	ret

00000712 <__vector_1>:
	}
}


ISR (INT0_vect)
{
 712:	1f 92       	push	r1
 714:	0f 92       	push	r0
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	0f 92       	push	r0
 71a:	11 24       	eor	r1, r1
 71c:	2f 93       	push	r18
 71e:	3f 93       	push	r19
 720:	4f 93       	push	r20
 722:	5f 93       	push	r21
 724:	6f 93       	push	r22
 726:	7f 93       	push	r23
 728:	8f 93       	push	r24
 72a:	9f 93       	push	r25
 72c:	af 93       	push	r26
 72e:	bf 93       	push	r27
 730:	ef 93       	push	r30
 732:	ff 93       	push	r31
	if(NTO_fptr!=NULL_PTR)
 734:	e0 91 fd 00 	lds	r30, 0x00FD	; 0x8000fd <NTO_fptr>
 738:	f0 91 fe 00 	lds	r31, 0x00FE	; 0x8000fe <NTO_fptr+0x1>
 73c:	30 97       	sbiw	r30, 0x00	; 0
 73e:	09 f0       	breq	.+2      	; 0x742 <__vector_1+0x30>
	{
		NTO_fptr();
 740:	09 95       	icall
	}
}
 742:	ff 91       	pop	r31
 744:	ef 91       	pop	r30
 746:	bf 91       	pop	r27
 748:	af 91       	pop	r26
 74a:	9f 91       	pop	r25
 74c:	8f 91       	pop	r24
 74e:	7f 91       	pop	r23
 750:	6f 91       	pop	r22
 752:	5f 91       	pop	r21
 754:	4f 91       	pop	r20
 756:	3f 91       	pop	r19
 758:	2f 91       	pop	r18
 75a:	0f 90       	pop	r0
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	0f 90       	pop	r0
 760:	1f 90       	pop	r1
 762:	18 95       	reti

00000764 <__vector_2>:
ISR (INT1_vect)
{
 764:	1f 92       	push	r1
 766:	0f 92       	push	r0
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	0f 92       	push	r0
 76c:	11 24       	eor	r1, r1
 76e:	2f 93       	push	r18
 770:	3f 93       	push	r19
 772:	4f 93       	push	r20
 774:	5f 93       	push	r21
 776:	6f 93       	push	r22
 778:	7f 93       	push	r23
 77a:	8f 93       	push	r24
 77c:	9f 93       	push	r25
 77e:	af 93       	push	r26
 780:	bf 93       	push	r27
 782:	ef 93       	push	r30
 784:	ff 93       	push	r31
	if(NT1_fptr!=NULL_PTR)
 786:	e0 91 fb 00 	lds	r30, 0x00FB	; 0x8000fb <NT1_fptr>
 78a:	f0 91 fc 00 	lds	r31, 0x00FC	; 0x8000fc <NT1_fptr+0x1>
 78e:	30 97       	sbiw	r30, 0x00	; 0
 790:	09 f0       	breq	.+2      	; 0x794 <__vector_2+0x30>
	{
		NT1_fptr();
 792:	09 95       	icall
	}
}
 794:	ff 91       	pop	r31
 796:	ef 91       	pop	r30
 798:	bf 91       	pop	r27
 79a:	af 91       	pop	r26
 79c:	9f 91       	pop	r25
 79e:	8f 91       	pop	r24
 7a0:	7f 91       	pop	r23
 7a2:	6f 91       	pop	r22
 7a4:	5f 91       	pop	r21
 7a6:	4f 91       	pop	r20
 7a8:	3f 91       	pop	r19
 7aa:	2f 91       	pop	r18
 7ac:	0f 90       	pop	r0
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	0f 90       	pop	r0
 7b2:	1f 90       	pop	r1
 7b4:	18 95       	reti

000007b6 <__vector_3>:
ISR (INT2_vect)
{
 7b6:	1f 92       	push	r1
 7b8:	0f 92       	push	r0
 7ba:	0f b6       	in	r0, 0x3f	; 63
 7bc:	0f 92       	push	r0
 7be:	11 24       	eor	r1, r1
 7c0:	2f 93       	push	r18
 7c2:	3f 93       	push	r19
 7c4:	4f 93       	push	r20
 7c6:	5f 93       	push	r21
 7c8:	6f 93       	push	r22
 7ca:	7f 93       	push	r23
 7cc:	8f 93       	push	r24
 7ce:	9f 93       	push	r25
 7d0:	af 93       	push	r26
 7d2:	bf 93       	push	r27
 7d4:	ef 93       	push	r30
 7d6:	ff 93       	push	r31
	if(NT2_fptr!=NULL_PTR)
 7d8:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <NT2_fptr>
 7dc:	f0 91 fa 00 	lds	r31, 0x00FA	; 0x8000fa <NT2_fptr+0x1>
 7e0:	30 97       	sbiw	r30, 0x00	; 0
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <__vector_3+0x30>
	{
		NT2_fptr();
 7e4:	09 95       	icall
	}
 7e6:	ff 91       	pop	r31
 7e8:	ef 91       	pop	r30
 7ea:	bf 91       	pop	r27
 7ec:	af 91       	pop	r26
 7ee:	9f 91       	pop	r25
 7f0:	8f 91       	pop	r24
 7f2:	7f 91       	pop	r23
 7f4:	6f 91       	pop	r22
 7f6:	5f 91       	pop	r21
 7f8:	4f 91       	pop	r20
 7fa:	3f 91       	pop	r19
 7fc:	2f 91       	pop	r18
 7fe:	0f 90       	pop	r0
 800:	0f be       	out	0x3f, r0	; 63
 802:	0f 90       	pop	r0
 804:	1f 90       	pop	r1
 806:	18 95       	reti

00000808 <SPI_Init>:
{
	CLR_BIT(SPCR,SPIE);
}
void SPI_SetCallback(void(*ptr)(void))
{
	SPI_fptr=ptr;
 808:	81 11       	cpse	r24, r1
 80a:	04 c0       	rjmp	.+8      	; 0x814 <SPI_Init+0xc>
 80c:	8d b1       	in	r24, 0x0d	; 13
 80e:	80 61       	ori	r24, 0x10	; 16
 810:	8d b9       	out	0x0d, r24	; 13
 812:	03 c0       	rjmp	.+6      	; 0x81a <SPI_Init+0x12>
 814:	8d b1       	in	r24, 0x0d	; 13
 816:	8f 7e       	andi	r24, 0xEF	; 239
 818:	8d b9       	out	0x0d, r24	; 13
 81a:	8d b1       	in	r24, 0x0d	; 13
 81c:	80 64       	ori	r24, 0x40	; 64
 81e:	8d b9       	out	0x0d, r24	; 13
 820:	08 95       	ret

00000822 <SPI_SendReceive>:
 822:	8f b9       	out	0x0f, r24	; 15
 824:	77 9b       	sbis	0x0e, 7	; 14
 826:	fe cf       	rjmp	.-4      	; 0x824 <SPI_SendReceive+0x2>
 828:	8f b1       	in	r24, 0x0f	; 15
 82a:	08 95       	ret

0000082c <__vector_12>:
}
ISR(SPI_STC_vect)
{
 82c:	1f 92       	push	r1
 82e:	0f 92       	push	r0
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	0f 92       	push	r0
 834:	11 24       	eor	r1, r1
 836:	2f 93       	push	r18
 838:	3f 93       	push	r19
 83a:	4f 93       	push	r20
 83c:	5f 93       	push	r21
 83e:	6f 93       	push	r22
 840:	7f 93       	push	r23
 842:	8f 93       	push	r24
 844:	9f 93       	push	r25
 846:	af 93       	push	r26
 848:	bf 93       	push	r27
 84a:	ef 93       	push	r30
 84c:	ff 93       	push	r31
	if(SPI_fptr!=NULL_PTR)
 84e:	e0 91 ff 00 	lds	r30, 0x00FF	; 0x8000ff <SPI_fptr>
 852:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <SPI_fptr+0x1>
 856:	30 97       	sbiw	r30, 0x00	; 0
 858:	09 f0       	breq	.+2      	; 0x85c <__vector_12+0x30>
	{
		SPI_fptr();
 85a:	09 95       	icall
	}
 85c:	ff 91       	pop	r31
 85e:	ef 91       	pop	r30
 860:	bf 91       	pop	r27
 862:	af 91       	pop	r26
 864:	9f 91       	pop	r25
 866:	8f 91       	pop	r24
 868:	7f 91       	pop	r23
 86a:	6f 91       	pop	r22
 86c:	5f 91       	pop	r21
 86e:	4f 91       	pop	r20
 870:	3f 91       	pop	r19
 872:	2f 91       	pop	r18
 874:	0f 90       	pop	r0
 876:	0f be       	out	0x3f, r0	; 63
 878:	0f 90       	pop	r0
 87a:	1f 90       	pop	r1
 87c:	18 95       	reti

0000087e <UART_Init>:
{
	CLR_BIT(UCSRB,RXCIE);
}
void UART_TX_SetCallBack(void(*localFptr)(void))
{
	UART_TX_Fptr=localFptr;
 87e:	83 e3       	ldi	r24, 0x33	; 51
 880:	89 b9       	out	0x09, r24	; 9
 882:	8b b1       	in	r24, 0x0b	; 11
 884:	8d 7f       	andi	r24, 0xFD	; 253
 886:	8b b9       	out	0x0b, r24	; 11
 888:	8a b1       	in	r24, 0x0a	; 10
 88a:	88 60       	ori	r24, 0x08	; 8
 88c:	8a b9       	out	0x0a, r24	; 10
 88e:	8a b1       	in	r24, 0x0a	; 10
 890:	80 61       	ori	r24, 0x10	; 16
 892:	8a b9       	out	0x0a, r24	; 10
 894:	08 95       	ret

00000896 <UART_Send_noBlock>:
 896:	8c b9       	out	0x0c, r24	; 12
 898:	08 95       	ret

0000089a <UART_Receive_noBlock>:
 89a:	8c b1       	in	r24, 0x0c	; 12
 89c:	08 95       	ret

0000089e <UART_RX_InterruptEnable>:
 89e:	8a b1       	in	r24, 0x0a	; 10
 8a0:	80 68       	ori	r24, 0x80	; 128
 8a2:	8a b9       	out	0x0a, r24	; 10
 8a4:	08 95       	ret

000008a6 <UART_RX_SetCallBack>:
}

void UART_RX_SetCallBack(void(*localFptr)(void))
{
	UART_RX_Fptr=localFptr;
 8a6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <UART_RX_Fptr+0x1>
 8aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <UART_RX_Fptr>
 8ae:	08 95       	ret

000008b0 <__vector_15>:
}

 ISR(USART_TXC_vect)
 {
 8b0:	1f 92       	push	r1
 8b2:	0f 92       	push	r0
 8b4:	0f b6       	in	r0, 0x3f	; 63
 8b6:	0f 92       	push	r0
 8b8:	11 24       	eor	r1, r1
 8ba:	2f 93       	push	r18
 8bc:	3f 93       	push	r19
 8be:	4f 93       	push	r20
 8c0:	5f 93       	push	r21
 8c2:	6f 93       	push	r22
 8c4:	7f 93       	push	r23
 8c6:	8f 93       	push	r24
 8c8:	9f 93       	push	r25
 8ca:	af 93       	push	r26
 8cc:	bf 93       	push	r27
 8ce:	ef 93       	push	r30
 8d0:	ff 93       	push	r31
	 if(UART_TX_Fptr!=NULL_PTR)
 8d2:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <UART_TX_Fptr>
 8d6:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <UART_TX_Fptr+0x1>
 8da:	30 97       	sbiw	r30, 0x00	; 0
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <__vector_15+0x30>
	 {
		 UART_TX_Fptr();
 8de:	09 95       	icall
	 }
	 
 }
 8e0:	ff 91       	pop	r31
 8e2:	ef 91       	pop	r30
 8e4:	bf 91       	pop	r27
 8e6:	af 91       	pop	r26
 8e8:	9f 91       	pop	r25
 8ea:	8f 91       	pop	r24
 8ec:	7f 91       	pop	r23
 8ee:	6f 91       	pop	r22
 8f0:	5f 91       	pop	r21
 8f2:	4f 91       	pop	r20
 8f4:	3f 91       	pop	r19
 8f6:	2f 91       	pop	r18
 8f8:	0f 90       	pop	r0
 8fa:	0f be       	out	0x3f, r0	; 63
 8fc:	0f 90       	pop	r0
 8fe:	1f 90       	pop	r1
 900:	18 95       	reti

00000902 <__vector_13>:
  ISR(USART_RXC_vect)
  {
 902:	1f 92       	push	r1
 904:	0f 92       	push	r0
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	0f 92       	push	r0
 90a:	11 24       	eor	r1, r1
 90c:	2f 93       	push	r18
 90e:	3f 93       	push	r19
 910:	4f 93       	push	r20
 912:	5f 93       	push	r21
 914:	6f 93       	push	r22
 916:	7f 93       	push	r23
 918:	8f 93       	push	r24
 91a:	9f 93       	push	r25
 91c:	af 93       	push	r26
 91e:	bf 93       	push	r27
 920:	ef 93       	push	r30
 922:	ff 93       	push	r31
	  if(UART_RX_Fptr!=NULL_PTR)
 924:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <UART_RX_Fptr>
 928:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <UART_RX_Fptr+0x1>
 92c:	30 97       	sbiw	r30, 0x00	; 0
 92e:	09 f0       	breq	.+2      	; 0x932 <__vector_13+0x30>
	  {
		  UART_RX_Fptr();
 930:	09 95       	icall
	  } 
 932:	ff 91       	pop	r31
 934:	ef 91       	pop	r30
 936:	bf 91       	pop	r27
 938:	af 91       	pop	r26
 93a:	9f 91       	pop	r25
 93c:	8f 91       	pop	r24
 93e:	7f 91       	pop	r23
 940:	6f 91       	pop	r22
 942:	5f 91       	pop	r21
 944:	4f 91       	pop	r20
 946:	3f 91       	pop	r19
 948:	2f 91       	pop	r18
 94a:	0f 90       	pop	r0
 94c:	0f be       	out	0x3f, r0	; 63
 94e:	0f 90       	pop	r0
 950:	1f 90       	pop	r1
 952:	18 95       	reti

00000954 <_exit>:
 954:	f8 94       	cli

00000956 <__stop_program>:
 956:	ff cf       	rjmp	.-2      	; 0x956 <__stop_program>
